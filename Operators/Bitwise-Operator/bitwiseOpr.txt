Bitwise Operator:

Bitwise operator’s works on bits. 
Turbo-c is a 16 bit compiler. Due to this bitwise
operations are limited to 16 bits only [2^0 to 2^15]. 

Bitwise operators operate integer type values only. 
We have to calculate only the on bits [ 1 ]. 
When the first bit[Sign bit] is 1 then the number is
Negative and it is 0 then the number is positive. 
They are very much used in system software development. 

Note: Bitwise operator is low level feature. C-Language supports following bitwise operators. 

1. & -Bitwise and
2. | - Bitwise or
3. ^ - XOR ==> Exclusive OR
4. ~ - Compliment operator
5. << - Left shift operator
6. >> - Right shift operator

1. & - Bitwise and: In this both bits are 1’s then result
bit is 1. Otherwise result bit is 0.
ex. 25 & 15 = 9

2.| - Bitwise or: In this both bits are 0’s then result bit
is 0. Otherwise result bit is 1. 
ex: 25 | 15 = 31

3. ^ - XOR [Exclusive OR]: In this both bits are
same then result bit is 0. Otherwise result bit is 1. 
ex: 25 ^ 15 = 22

4. ~ - Compliment operator: In compliment operation the bits are complimented. 
i.e. 1’s become 0’s and 0’s become 1’s. Due to this +Ve no becomes –Ve and –Ve 
no becomes +Ve. 
ex: ~25  -26

5. << - left shift operator: In left shift operation, the specified no of bits
are deleted from left side and the same no of zeros added on right side. 
In left shift operation, most probably the value is multiplied with 2 that no of times.
ex: 25<<1=50, 25<<2=100, 25<<15 =-32768, 25<<16=0

6. >> - Right shift operator: In right shift operation, the bits are moved to right side
i.e. the specified no.of bits are deleted from right side and same no. of zero's are added left side. 
Due to this always the number is divided with 2 that no of times.
ex. 25 >> 1 = 12